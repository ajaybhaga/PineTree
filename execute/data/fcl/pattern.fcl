// Author: Ajay Bhaga
// Block definition (there may be more than one block per file)
FUNCTION_BLOCK pattern

// Define input variables
VAR_INPUT
    short_start_value : REAL;
    short_start_value_plus_one : REAL;
    short_end_value : REAL;
    middle_start_value : REAL;
    middle_start_value_plus_one : REAL;
    middle_end_value : REAL;
    long_start_value : REAL;
    long_end_value : REAL;

    line0_low_value : REAL;
    line0_equal_low_value : REAL;
    line0_equal_low_value_plus_one : REAL;
    line0_equal_value : REAL;
    line0_equal_high_value : REAL;
    line0_high_value : REAL;

    line1_low_value : REAL;
    line1_equal_low_value : REAL;
    line1_equal_low_value_plus_one : REAL;
    line1_equal_value : REAL;
    line1_equal_high_value : REAL;
    line1_high_value : REAL;
END_VAR

// Define output variable
VAR_OUTPUT
    pattern : REAL;
END_VAR

// Fuzzify input variable 'trend'
FUZZIFY trend
    TERM up := 1;
    TERM down := 0;
END_FUZZIFY

// Fuzzify input variable 'line0_body'
FUZZIFY line0_body
    TERM equal := (0,1) (short_start_value,0);
    TERM short := (0,0) (short_start_value,1) (short_end_value,1) (middle_start_value, 0); 
    TERM above_short := (0,0) (short_start_value,0) (short_start_value_plus_one,1);
    TERM middle := (short_end_value,0) (middle_start_value,1) (middle_end_value,1) (long_start_value,0);
    TERM above_middle := (0,0) (middle_start_value,0) (middle_start_value_plus_one,1);
    TERM long := (middle_end_value,0) (long_start_value,1) (long_end_value,1);
END_FUZZIFY

// Fuzzify input variable 'line0_body_colour'
FUZZIFY line0_body_colour
    TERM white := 1;
    TERM black := 0;
END_FUZZIFY

// Fuzzify input variable 'line0_open_style'
FUZZIFY line0_open_style
    TERM low := (line0_low_value,1) (line0_equal_low_value,0);
    TERM equal_low := trian line0_low_value line0_equal_low_value line0_equal_value;
    TERM above_equal_low := (line0_low_value,0) (line0_equal_low_value,0) (line0_equal_low_value_plus_one,1);
    TERM equal := trian line0_equal_low_value line0_equal_value line0_equal_high_value;
    TERM equal_high := trian line0_equal_value line0_equal_high_value line0_high_value;
    TERM high := (line0_equal_high_value,0) (line0_high_value,1);
END_FUZZIFY

// Fuzzify input variable 'line0_close_style'
FUZZIFY line0_close_style
    TERM low := (line0_low_value,1) (line0_equal_low_value,0);
    TERM equal_low := trian line0_low_value line0_equal_low_value line0_equal_value;
    TERM above_equal_low := (line0_low_value,0) (line0_equal_low_value,0) (line0_equal_low_value_plus_one,1);
    TERM equal := trian line0_equal_low_value line0_equal_value line0_equal_high_value;
    TERM equal_high := trian line0_equal_value line0_equal_high_value line0_high_value;
    TERM high := (line0_equal_high_value,0) (line0_high_value,1);
END_FUZZIFY

// Fuzzify input variable 'line1_body'
FUZZIFY line1_body
    TERM equal := (0,1) (short_start_value,0);
    TERM short := (0,0) (short_start_value,1) (short_end_value,1) (middle_start_value, 0); 
    TERM above_short := (0,0) (short_start_value,0) (short_start_value_plus_one,1);
    TERM middle := (short_end_value,0) (middle_start_value,1) (middle_end_value,1) (long_start_value,0);
    TERM above_middle := (0,0) (middle_start_value,0) (middle_start_value_plus_one,1);
    TERM long := (middle_end_value,0) (long_start_value,1) (long_end_value,1);
END_FUZZIFY

// Fuzzify input variable 'line1_body_colour'
FUZZIFY line1_body_colour
    TERM white := 1;
    TERM black := 0;
END_FUZZIFY

// Fuzzify input variable 'line1_open_style'
FUZZIFY line1_open_style
    TERM low := (line1_low_value,1) (line1_equal_low_value,0);
    TERM equal_low := trian line1_low_value line1_equal_low_value line1_equal_value;
    TERM above_equal_low := (line1_low_value,0) (line1_equal_low_value,0) (line1_equal_low_value_plus_one,1);
    TERM equal := trian line1_equal_low_value line1_equal_value line1_equal_high_value;
    TERM equal_high := trian line1_equal_value line1_equal_high_value line1_high_value;
    TERM high := (line1_equal_high_value,0) (line1_high_value,1);
END_FUZZIFY

// Fuzzify input variable 'line1_close_style'
FUZZIFY line1_close_style
    TERM low := (line1_low_value,1) (line1_equal_low_value,0);
    TERM equal_low := trian line1_low_value line1_equal_low_value line1_equal_value;
    TERM above_equal_low := (line1_low_value,0) (line1_equal_low_value,0) (line1_equal_low_value_plus_one,1);
    TERM equal := trian line1_equal_low_value line1_equal_value line1_equal_high_value;
    TERM equal_high := trian line1_equal_value line1_equal_high_value line1_high_value;
    TERM high := (line1_equal_high_value,0) (line1_high_value,1);
END_FUZZIFY

// Defuzzify output variable 'pattern'
DEFUZZIFY pattern
    TERM bullish_engulfing := 0.79;
    TERM bearish_engulfing := 0.21;
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COGS;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY

RULEBLOCK No1
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : MIN;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;

    RULE 1 : IF trend IS up AND line0_open_style IS high AND line0_close_style IS low
             AND line0_body IS above_middle AND line0_body_colour IS black AND line1_open_style IS above_equal_low
             AND line1_close_style IS high AND line1_body IS above_short AND line1_body_colour IS white
             THEN pattern IS bearish_engulfing;

    RULE 2 : IF trend IS down AND line0_open_style IS high AND line0_close_style IS low
             AND line0_body IS above_middle AND line0_body_colour IS black AND line1_open_style IS above_equal_low
             AND line1_close_style IS high AND line1_body IS above_short AND line1_body_colour IS white
             THEN pattern IS bearish_engulfing;


 //   RULE 2 : IF trend IS up AND line0_open_style IS high AND line0_close_style IS low
  //           AND line0_body IS above_middle AND line0_body_colour IS black
   //          THEN pattern IS drop;

  
END_RULEBLOCK

END_FUNCTION_BLOCK