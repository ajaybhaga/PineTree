// Block definition (there may be more than one block per file)
FUNCTION_BLOCK pattern

// Define input variables
VAR_INPUT
    short_start_value : REAL;
    short_start_value_plus_one : REAL;
    short_end_value : REAL;
    middle_start_value : REAL;
    middle_start_value_plus_one : REAL;
    middle_end_value : REAL;
    long_start_value : REAL;
    long_end_value : REAL;

    low_value : REAL;
    equal_low_value : REAL;
    equal_low_value_plus_one : REAL;
    equal_value : REAL;
    equal_high_value : REAL;
    high_value : REAL;
END_VAR

// Define output variable
VAR_OUTPUT
    pattern : REAL;
END_VAR

// Fuzzify input variable 'trend'
FUZZIFY trend
    TERM up := 1;
    TERM down := 0;
END_FUZZIFY

// Fuzzify input variable 'line0_body'
FUZZIFY line0_body
    TERM equal := (0,1) (short_start_value,0);
    TERM short := (0,0) (short_start_value,1) (short_end_value,1) (middle_start_value, 0); 
    TERM above_short := (0,0) (short_start_value,0) (short_start_value_plus_one,1);
    TERM middle := (short_end_value,0) (middle_start_value,1) (middle_end_value,1) (long_start_value,0);
    TERM above_middle := (0,0) (middle_start_value,0) (middle_start_value_plus_one,1);
    TERM long := (middle_end_value,0) (long_start_value,1) (long_end_value,1);
END_FUZZIFY

// Fuzzify input variable 'line0_body_colour'
FUZZIFY line0_body_colour
    TERM white := 1;
    TERM black := 0;
END_FUZZIFY

// Fuzzify input variable 'line0_open_style'
FUZZIFY line0_open_style
    TERM low := (0,1) (equal_low_value,0);
    TERM equal_low := trian 0 equal_low_value equal_value;
    TERM above_equal_low := (0,0) (equal_low_value,0) (equal_low_value_plus_one,1);
    TERM equal := trian equal_low_value equal_value equal_high_value;
    TERM equal_high := trian equal_value equal_high_value high_value;
    TERM high := (equal_high_value,0) (high_value,1);
END_FUZZIFY

// Fuzzify input variable 'line0_close_style'
FUZZIFY line0_close_style
    TERM low := (0,1) (equal_low_value,0);
    TERM equal_low := trian 0 equal_low_value equal_value;
    TERM above_equal_low := (0,0) (equal_low_value,0) (equal_low_value_plus_one,1);
    TERM equal := trian equal_low_value equal_value equal_high_value;
    TERM equal_high := trian equal_value equal_high_value high_value;
    TERM high := (equal_high_value,0) (high_value,1);
END_FUZZIFY

// Fuzzify input variable 'line1_body'
FUZZIFY line1_body
    TERM equal := (0,1) (short_start_value,0);
    TERM short := (0,0) (short_start_value,1) (short_end_value,1) (middle_start_value, 0); 
    TERM above_short := (0,0) (short_start_value,0) (short_start_value_plus_one,1);
    TERM middle := (short_end_value,0) (middle_start_value,1) (middle_end_value,1) (long_start_value,0);
    TERM above_middle := (0,0) (middle_start_value,0) (middle_start_value_plus_one,1);
    TERM long := (middle_end_value,0) (long_start_value,1) (long_end_value,1);
END_FUZZIFY

// Fuzzify input variable 'line1_body_colour'
FUZZIFY line1_body_colour
    TERM white := 1;
    TERM black := 0;
END_FUZZIFY

// Fuzzify input variable 'line1_open_style'
FUZZIFY line1_open_style
    TERM low := (0,1) (equal_low_value,0);
    TERM equal_low := trian 0 equal_low_value equal_value;
    TERM above_equal_low := (0,0) (equal_low_value,0) (equal_low_value_plus_one,1);
    TERM equal := trian equal_low_value equal_value equal_high_value;
    TERM equal_high := trian equal_value equal_high_value high_value;
    TERM high := (equal_high_value,0) (high_value,1);
END_FUZZIFY

// Fuzzify input variable 'line1_close_style'
FUZZIFY line1_close_style
    TERM low := (0,1) (equal_low_value,0);
    TERM equal_low := trian 0 equal_low_value equal_value;
    TERM above_equal_low := (0,0) (equal_low_value,0) (equal_low_value_plus_one,1);
    TERM equal := trian equal_low_value equal_value equal_high_value;
    TERM equal_high := trian equal_value equal_high_value high_value;
    TERM high := (equal_high_value,0) (high_value,1);
END_FUZZIFY

// Defuzzify output variable 'pattern'
DEFUZZIFY pattern
    TERM bullish := 1;
    TERM bearish := 0;
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COGS;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY

RULEBLOCK No1
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : MIN;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;

    //RULE 1 : IF prev_colour IS black AND curr_colour IS white AND curr_close > prev_open AND curr_open < prev_close
     //           THEN engulfing IS bullish;

//    RULE 2 : IF prev_colour IS white AND curr_colour IS black AND curr_close < prev_open AND curr_open > prev_close
 //               THEN engulfing IS bearish;
END_RULEBLOCK

END_FUNCTION_BLOCK